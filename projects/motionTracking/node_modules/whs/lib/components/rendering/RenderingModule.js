'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RenderingModule = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _class, _temp;

var _three = require('three');

var THREE = _interopRequireWildcard(_three);

var _stats = require('stats.js');

var _stats2 = _interopRequireDefault(_stats);

var _Component2 = require('../../core/Component');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RenderingModule = (_temp = _class = function (_Component) {
  (0, _inherits3.default)(RenderingModule, _Component);

  function RenderingModule() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, RenderingModule);

    var _this = (0, _possibleConstructorReturn3.default)(this, (RenderingModule.__proto__ || (0, _getPrototypeOf2.default)(RenderingModule)).call(this, params, RenderingModule.defaults, RenderingModule.instructions));

    _this.build(params);
    (0, _get3.default)(RenderingModule.prototype.__proto__ || (0, _getPrototypeOf2.default)(RenderingModule.prototype), 'wrap', _this).call(_this);
    return _this;
  }

  (0, _createClass3.default)(RenderingModule, [{
    key: 'attachToCanvas',
    value: function attachToCanvas() {
      if (this.world) {
        // TODO: detach from dom
      }

      var canvas = this.$renderer.domElement;
      this.world.$canvas = canvas;

      // attach to new parent world dom
      this.world.$element.appendChild(canvas);
      canvas.style.width = '100%';
      canvas.style.height = '100%';
    }
  }, {
    key: 'make$stats',
    value: function make$stats() {
      var statsData = this.params.stats;

      if (statsData) {
        var stats = new _stats2.default();
        this.$stats = stats;

        if (statsData === 'fps') stats.setMode(0);else if (statsData === 'ms') stats.setMode(1);else if (statsData === 'mb') stats.setMode(1);else stats.setMode(0);

        var stStyle = stats.domElement.style;

        stStyle.position = 'absolute';
        stStyle.left = '0px';
        stStyle.top = '0px';

        this.world.$element.appendChild(stats.domElement);
      }
    }
  }, {
    key: 'build',
    value: function build() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      throw new Error('Build method has to be re-implemented in each rendering module (use it to initialize your rendering module!)');
    }
  }, {
    key: 'renderModule',
    value: function renderModule(scene, camera, delta) {
      throw new Error('renderModule method has to be re-implemented in each rendering module (or else your module won\'t do anything!)');
    }
  }, {
    key: 'setSize',
    value: function setSize(width, height) {
      throw new Error('setSize method has to be re-implemented in each rendering module (or else your module won\'t resize!)');
    }
  }, {
    key: 'start',
    value: function start(onStartRendering, onFinishRendering) {
      this.clock = new THREE.Clock();

      window.requestAnimFrame = function () {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
          window.setTimeout(callback, 1000 / 60);
        };
      }();

      this.onStartRendering = onStartRendering;
      this.onFinishRendering = onFinishRendering;
      if (this.world.render) this.render(this.world.$scene, this.world.$camera.native);
    }
  }, {
    key: 'render',
    value: function render(cachedScene, cachedCamera) {
      var scene = cachedScene;
      var camera = cachedCamera;
      var clock = this.clock;
      var stats = this.$stats;

      var onStartRendering = this.onStartRendering;
      var onFinishRendering = this.onFinishRendering;

      function render() {
        window.requestAnimFrame(render.bind(this));

        var delta = clock.getDelta();

        // Init stats.
        if (stats) stats.begin();
        if (onStartRendering) onStartRendering(delta);

        this.renderModule(scene, camera, delta);

        if (onFinishRendering) onFinishRendering(delta);

        // End helper.
        if (stats) stats.end();
      }

      render.bind(this)();
    }
  }, {
    key: 'world',
    get: function get() {
      return this._world;
    },
    set: function set(world) {
      var params = this.params;

      this._world = world;
      this.attachToCanvas();

      if (params.modules && params.modules.stats) this.make$stats();

      this.emit('worldchange');
    }
  }]);
  return RenderingModule;
}(_Component2.Component), _class.defaults = {
  rendering: {
    background: {
      color: 0x000000,
      opacity: 1
    },

    shadowmap: {
      enabled: true,
      type: THREE.PCFSoftShadowMap
    },

    renderer: {}
  }
}, _temp);
exports.RenderingModule = RenderingModule;