'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConcaveMesh = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _mesh = require('../core/mesh');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ConcaveMesh = exports.ConcaveMesh = function (_Mesh) {
    (0, _inherits3.default)(ConcaveMesh, _Mesh);

    function ConcaveMesh(geom, material) {
        var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var physicsReplacementGeometry = arguments[3];
        (0, _classCallCheck3.default)(this, ConcaveMesh);

        var physParams = params.physics;
        var mass = physParams.mass || params.mass;

        var _this = (0, _possibleConstructorReturn3.default)(this, (ConcaveMesh.__proto__ || (0, _getPrototypeOf2.default)(ConcaveMesh)).call(this, geom, material, mass, physParams));

        var geometry = physicsReplacementGeometry ? physicsReplacementGeometry : geom;

        var isBuffer = geometry.type === 'BufferGeometry';

        if (!geometry.boundingBox) geometry.computeBoundingBox();

        var data = isBuffer ? geometry.attributes.position.array : new Float32Array(geometry.faces.length * 9);

        if (params.scale) geometry.scale(params.scale.x, params.scale.y, params.scale.z);

        var vertices = geometry.vertices;

        if (!isBuffer) {
            for (var i = 0; i < geometry.faces.length; i++) {
                var face = geometry.faces[i];

                data[i * 9] = vertices[face.a].x;
                data[i * 9 + 1] = vertices[face.a].y;
                data[i * 9 + 2] = vertices[face.a].z;

                data[i * 9 + 3] = vertices[face.b].x;
                data[i * 9 + 4] = vertices[face.b].y;
                data[i * 9 + 5] = vertices[face.b].z;

                data[i * 9 + 6] = vertices[face.c].x;
                data[i * 9 + 7] = vertices[face.c].y;
                data[i * 9 + 8] = vertices[face.c].z;
            }
        }

        var width = geometry.boundingBox.max.x - geometry.boundingBox.min.x;
        var height = geometry.boundingBox.max.y - geometry.boundingBox.min.y;
        var depth = geometry.boundingBox.max.z - geometry.boundingBox.min.z;

        _this._physijs.type = 'concave';
        _this._physijs.data = data;
        _this._physijs.mass = mass;

        _this._physijs.params = {
            friction: physParams.friction,
            restitution: physParams.restitution,
            damping: physParams.damping,
            margin: physParams.margin
        };
        return _this;
    }

    return ConcaveMesh;
}(_mesh.Mesh);