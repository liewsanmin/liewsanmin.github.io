'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PostProcessor = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp;

var _three = require('three');

var THREE = _interopRequireWildcard(_three);

var _index = require('../../../utils/index');

var _RenderingModule2 = require('../RenderingModule');

var _EffectComposer = require('./EffectComposer.js');

var _RenderPass = require('./pass/RenderPass.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PostProcessor = (_temp = _class = function (_RenderingModule) {
  (0, _inherits3.default)(PostProcessor, _RenderingModule);

  function PostProcessor() {
    var _ret;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, PostProcessor);

    var _this = (0, _possibleConstructorReturn3.default)(this, (PostProcessor.__proto__ || (0, _getPrototypeOf2.default)(PostProcessor)).call(this, (0, _index.extend)(params, PostProcessor.defaults)));

    return _ret = function _ret(world) {
      _this.world = world;
      return _this;
    }, (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(PostProcessor, [{
    key: 'build',
    value: function build() {
      var renderParams = this.params.rendering;

      var width = Number(this.params.width * this.params.resolution.width).toFixed();
      var height = Number(this.params.height * this.params.resolution.height).toFixed();

      // Renderer.
      this.$renderer = new THREE.WebGLRenderer(renderParams.renderer);

      var renderer = this.$renderer;
      renderer.setClearColor(renderParams.background.color, renderParams.background.opacity);

      // Shadowmap.
      renderer.shadowMap.enabled = renderParams.shadowmap.enabled;
      renderer.shadowMap.type = renderParams.shadowmap.type;
      renderer.shadowMap.cascade = true;

      this.setSize(this.params.width, this.params.height);

      // RenderTarget
      this.$renderTarget = new THREE.WebGLRenderTarget(width, height, this.params.renderTarget);
    }
  }, {
    key: 'make$composer',
    value: function make$composer() {
      // TODO: throw or something here
      if (!this.$renderer || !this.$renderTarget || this.$composer) return;
      this.$composer = new _EffectComposer.EffectComposer(this.$renderer, this.$renderTarget);
    }
  }, {
    key: 'onParentWorldChanged',
    value: function onParentWorldChanged() {
      // EffectComposer
      if (this.world) this.make$composer();else this.$composer = undefined;
    }

    /**
     * Create and add a WHS.Pass to the post processing pipeline.
     * @param  {Function} passCreator : A function that must return a WHS.Pass instance. It can be used to configurate the pass.
     * @return {WHS.Pass} The created WHS.Pass
     */

  }, {
    key: 'createPass',
    value: function createPass(passCreator) {
      if (typeof passCreator === 'function') return passCreator(this.$composer);
    }

    /**
     * [getPass description]
     * @param  {String} name : The unique name of the pass.
     * @return {WHS.Pass} The found WHS.Pass, otherwise undefined.
     */

  }, {
    key: 'getPass',
    value: function getPass(name) {
      return this.$composer ? this.$composer.getPass(name) : undefined;
    }

    /**
     * A helper to create a render pass (WHS.RenderPass) that will draw your geometry in the PostProcessor first pass.
     * @param  {Boolean} renderToScreen : Should the renderpass be rendered directly to screen
     */

  }, {
    key: 'createRenderPass',
    value: function createRenderPass() {
      var renderToScreen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      var world = this.world;

      if (world.$scene && world.$camera && this.$composer) {
        this.createPass(function (composer) {
          var pass = new _RenderPass.RenderPass('renderscene', world.$scene, world.$camera.native);
          pass.renderToScreen = renderToScreen;
          composer.addPass(pass);
        });
      }
    }

    /**
     * A helper to get the render pass of this PostProcessor.
     * @return {WHS.RenderPass} The render pass found, otherwise undefined.
     */

  }, {
    key: 'getRenderPass',
    value: function getRenderPass() {
      return this.getPass('renderscene');
    }

    /**
     * Remove a pass from the PostProcessor
     * @param  {String} name : The unique name of the pass
     */

  }, {
    key: 'removePass',
    value: function removePass(name) {
      if (this.$composer) this.$composer.removePass(name);
    }

    /**
     * Used by the WHS.World instance associated with this PostProcessor to set the container.
     * @param {DOM} container : The Dom container element.
     */

  }, {
    key: 'setContainerConfig',
    value: function setContainerConfig(container) {
      this.container = container;
      // TODO: handle autoresize container offset
    }
  }, {
    key: 'setSize',
    value: function setSize(width, height) {
      if (this.$renderer) {
        this.$renderer.setSize(width, height);
        if (this.$composer) this.$composer.setSize(width, height);
      }
    }

    /**
     * Rendering the PostProcessor and all its passes.
     * @param  {Number} delta : The delta time between two frames.
     */

  }, {
    key: 'renderModule',
    value: function renderModule(delta) {
      if (this.$composer) this.$composer.render(delta);
    }

    /**
     * Set the renderer to use.
     * @param {THREE.WebGLRenderer} renderer : The renderer instance.
     */

  }, {
    key: '$renderer',
    set: function set(renderer) {
      this._renderer = renderer;
      this.make$composer();
    }

    /**
     * Get the renderer used by this PostProcessor to render.
     * @return {THREE.WebGLRenderer} The WebGLRenderer.
     */
    ,
    get: function get() {
      return this._renderer;
    }

    /**
     * Set renderTarget, this will rebuild the internal EffectComposer.
     * @param  {THREE.WebGLRenderTarget} renderTarget : The WebGLRenderTarget to use.
     */

  }, {
    key: '$renderTarget',
    set: function set(renderTarget) {
      this._renderTarget = renderTarget;
      this.make$composer();
    }

    /**
     * Get renderTarget used by this PostProcessor to render to.
     * @return {THREE.WebGLRenderTarget} The WebGLRenderTarget.
     */
    ,
    get: function get() {
      return this._renderTarget;
    }

    /**
     * Set composer, by default PostProcessor instanciate its own instance of EffectComposer.
     * @param  {EffectComposer} composer : The composer instance to use.
     */

  }, {
    key: '$composer',
    set: function set(composer) {
      this._composer = composer;
    }

    /**
     * Get composer attribute
     * @return {EffectCompost} The EffectComposer managed by this PostProcessor.
     */
    ,
    get: function get() {
      return this._composer;
    }
  }]);
  return PostProcessor;
}(_RenderingModule2.RenderingModule), _class.defaults = {
  autoresize: true,

  width: window.innerWidth,
  height: window.innerHeight,

  resolution: {
    width: 1,
    height: 1
  },

  renderTarget: {
    minFilter: THREE.LinearFilter,
    magFilter: THREE.LinearFilter,
    format: THREE.RGBAFormat,
    stencilBuffer: false,
    toScreen: true
  }
}, _temp);
exports.PostProcessor = PostProcessor;